Andrew Sneap and Ohad Kammar

Relate S2 symmetries to the collection of relations

\begin{code}
{-# OPTIONS --without-K --exact-split --no-sized-types --no-guardedness --auto-inline --lossy-unification --allow-unsolved-metas #-} --safe

-- TODO: remove unnecessary dependencies

open import MLTT.Spartan renaming (_+_ to _‚àî_)

open import Notation.CanonicalMap
open import Notation.Order
open import UF.PropTrunc
open import MLTT.Sigma
open import Notation.General

open import UF.Subsingletons
open import UF.FunExt
open import UF.Equiv
open import UF.Powerset
open import UF.UniverseEmbedding

-- ought to not be needed eventually
open import UF.Univalence

open import Rationals.Type
open import Rationals.Order
open import Integers.Type
open import Integers.Order

open import Groups.Type
open import Groups.GroupActions
open import Groups.Subgroups

open import MLTT.Id

open import DedekindReals.Symmetry.UF
open import DedekindReals.Symmetry.IndexedAction
open import DedekindReals.Symmetry.ActionsConstructions
open import DedekindReals.Symmetry.Equivariance
open import DedekindReals.Symmetry.Transport
open import DedekindReals.Symmetry.S2

module DedekindReals.Symmetry.Relations-S2
     (pe : Prop-Ext)
     (pt : propositional-truncations-exist)
     (fe : Fun-Ext)
     {ùì§‚ÇÄ : Universe}
     (X : ùì§‚ÇÄ Ãá) (Xset : is-set X) where

     open import DedekindReals.Symmetry.MetaRelations pe pt fe X Xset
     open import DedekindReals.Symmetry.Subactions pe fe

     opposite : Rel ‚Üí Rel
     opposite R xy =
       R (flip ‚óÇ‚ü® S‚ÇÇ ‚à£ Flip X Xset  ‚ü© xy)

     _‚óÇ‚ü®S‚ÇÇ‚à£Rel‚ü©_ : action-structure S‚ÇÇ Rel
     id‚ààS‚ÇÇ ‚óÇ‚ü®S‚ÇÇ‚à£Rel‚ü© R = R
     flip  ‚óÇ‚ü®S‚ÇÇ‚à£Rel‚ü© R = opposite R

     assoc-Rel : is-assoc S‚ÇÇ _‚óÇ‚ü®S‚ÇÇ‚à£Rel‚ü©_
     assoc-Rel id‚ààS‚ÇÇ h x = refl
     assoc-Rel flip id‚ààS‚ÇÇ x = refl
     assoc-Rel flip flip x = refl

     unital-Rel : is-unital S‚ÇÇ _‚óÇ‚ü®S‚ÇÇ‚à£Rel‚ü©_
     unital-Rel x = refl

     RelIsSet : is-set Rel
     RelIsSet {R} {.R} refl arefl = {!!} --refl

     S‚ÇÇonRel : Action-structure S‚ÇÇ Rel
     S‚ÇÇonRel = _‚óÇ‚ü®S‚ÇÇ‚à£Rel‚ü©_
             , RelIsSet
             , assoc-Rel
             , unital-Rel

     S‚ÇÇ‚à£Rel : Action (S‚ÇÇ {ùì§ = ùì§‚ÇÄ ‚Å∫})
     S‚ÇÇ‚à£Rel = Rel , S‚ÇÇonRel

     S‚ÇÇ' : Group (ùì§‚ÇÄ ‚Å∫‚Å∫)
     S‚ÇÇ' = Lift-group pe fe (S‚ÇÇ {ùì§‚ÇÄ ‚Å∫})

     S‚ÇÇ'‚à£Rel' : Action S‚ÇÇ'
     S‚ÇÇ'‚à£Rel' = Lift-action pe fe S‚ÇÇ S‚ÇÇ‚à£Rel

     Rel'IsSet : is-set ‚ü® S‚ÇÇ'‚à£Rel' ‚ü©
     Rel'IsSet = Lift-is-set (ùì§‚ÇÄ ‚Å∫‚Å∫) Rel RelIsSet

     transitive-is-invariant : invariant
       S‚ÇÇ' S‚ÇÇ'‚à£Rel'
       (Œ© (ùì§‚ÇÄ ‚Å∫)) prop-is-set
       (transitive-rel ‚àò lower)
     transitive-is-invariant =
       invariant-proposition pe fe S‚ÇÇ' S‚ÇÇ'‚à£Rel'
       (transitive-rel ‚àò lower)
       lemma
       where
         lemma : (g : ‚ü® S‚ÇÇ' ‚ü©) ‚Üí (a : ‚ü® S‚ÇÇ'‚à£Rel' ‚ü©) ‚Üí
                 ‚ü® transitive-rel (lower a) ‚ü© ‚Üí
                 ‚ü® transitive-rel
                    (lower g ‚óÇ‚ü® S‚ÇÇ ‚à£ S‚ÇÇ‚à£Rel ‚ü© lower a) ‚ü©
         lemma g a tr with lower g
         lemma _ a tr | id‚ààS‚ÇÇ = tr
         lemma _ a tr | flip  = lift _ Œª x y z xRy yRz ‚Üí
                                lower tr z y x yRz xRy

     irreflexive-is-invariant : invariant
       S‚ÇÇ' S‚ÇÇ'‚à£Rel'
       (Œ© (ùì§‚ÇÄ ‚Å∫)) prop-is-set
       (irreflexive-rel ‚àò lower)
     irreflexive-is-invariant =
       invariant-proposition pe fe S‚ÇÇ' S‚ÇÇ'‚à£Rel'
       (irreflexive-rel ‚àò lower)
       lemma
       where
         lemma : (g : ‚ü® S‚ÇÇ' ‚ü©) ‚Üí (R : ‚ü® S‚ÇÇ'‚à£Rel' ‚ü©) ‚Üí
                 ‚ü® irreflexive-rel (lower R) ‚ü© ‚Üí
                 ‚ü® irreflexive-rel
                    (lower g ‚óÇ‚ü® S‚ÇÇ ‚à£ S‚ÇÇ‚à£Rel ‚ü© lower R) ‚ü©
         lemma g a ir with lower g
         lemma g a ir | id‚ààS‚ÇÇ = ir
         lemma g a ir | flip  = lift _ Œª x prf ‚Üí lower ir x prf
     S‚ÇÇ‚à£Quasi-Ordering : Action (S‚ÇÇ {ùì§‚ÇÄ ‚Å∫})
     S‚ÇÇ‚à£Quasi-Ordering = subaction
       (S‚ÇÇ {ùì§‚ÇÄ ‚Å∫})
       S‚ÇÇ‚à£Rel
       (irreflexive-rel ‚àß transitive-rel)
       (‚àß-invariant S‚ÇÇ S‚ÇÇ‚à£Rel irreflexive-rel transitive-rel
         (invariant-proposition-prop-is-invariant
           S‚ÇÇ' S‚ÇÇ'‚à£Rel' (irreflexive-rel ‚àò lower)
           irreflexive-is-invariant)
         (invariant-proposition-prop-is-invariant
           S‚ÇÇ' S‚ÇÇ'‚à£Rel' (transitive-rel ‚àò lower)
           transitive-is-invariant))

     S‚ÇÇ'‚à£Quasi-Ordering' : Action S‚ÇÇ'
     S‚ÇÇ'‚à£Quasi-Ordering' = Lift-action
       pe fe S‚ÇÇ S‚ÇÇ‚à£Quasi-Ordering

     trichotomous-is-invariant : invariant
       S‚ÇÇ' S‚ÇÇ'‚à£Quasi-Ordering'
       (Œ© (ùì§‚ÇÄ ‚Å∫)) prop-is-set
       ((Œª { (R , ir , tr) ‚Üí trichotomous-rel R ir tr}) ‚àò lower)
     trichotomous-is-invariant = invariant-proposition pe fe
       S‚ÇÇ' S‚ÇÇ'‚à£Quasi-Ordering'
       ((Œª { (R , ir , tr) ‚Üí trichotomous-rel R ir tr}) ‚àò lower)
       lemma
       where
         lemma : prop-is-invariant S‚ÇÇ' S‚ÇÇ'‚à£Quasi-Ordering'
           ((Œª { (R , ir , tr) ‚Üí trichotomous-rel R ir tr })
            ‚àò lower)
         lemma g R prf with lower g
         ... | id‚ààS‚ÇÇ = prf
         ... | flip = lift _ Œª x y ‚Üí
           Cases (lower prf y x)
             (Œª yRx ‚Üí inl yRx)
             (cases (Œª yÔºùx ‚Üí inr (inl ((yÔºùx)‚Åª¬π)))
                    Œª xRy ‚Üí inr (inr xRy))

\end{code}
